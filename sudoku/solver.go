package sudoku

//ToDO
//write func Solver()
//RZhanserik

func Solver(grid *[9][9]rune, row int, col int) int {
	if row == 8 && col == 9 { //  проверка конца (если же судоку был полностью решен)
		return 1
	}
	if col == 9 { // если мы дошли до конца столбца переходим с след строку и обнуляем столббец
		row++
		col = 0
	}
	if grid[row][col] != '.' { // если в данной строке по его столбцу стоит цифра рекурсивно вызываем функцию чтобы он перешел на другой столбец и проверял
		return Solver(grid, row, col+1)
	}
	count := 0
	for num := '1'; num <= '9'; num++ { // циклично проверяем от одного 1 до 9 какую цифру можем поставить
		if Checker(*grid, row, col, num) { // проверяем можно ли поставить цифру
			grid[row][col] = num // ставим
			count += Solver(grid, row, col+1)
			if count > 1 { // вызваем рекурсию и увеличиваем столбеу
				return count // если же судоку решилось останавливаем цикл и возвращем true
			}
		}
		grid[row][col] = '.' // очищаем столбец для след рекурсии
	}
	return count
}

func Res(grid *[9][9]rune, row int, col int) bool {
	if row == 8 && col == 9 { //  проверка конца (если же судоку был полностью решен)
		return true
	}
	if col == 9 { // если мы дошли до конца столбца переходим с след строку и обнуляем столббец
		row++
		col = 0
	}
	if grid[row][col] != '.' { // если в данной строке по его столбцу стоит цифра рекурсивно вызываем функцию чтобы он перешел на другой столбец и проверял
		return Res(grid, row, col+1)
	}
	for num := '1'; num <= '9'; num++ { // циклично проверяем от одного 1 до 9 какую цифру можем поставить
		if Checker(*grid, row, col, num) { // проверяем можно ли поставить цифру
			grid[row][col] = num       // ставим
			if Res(grid, row, col+1) { // вызваем рекурсию и увеличиваем столбеу
				return true // если же судоку решилось останавливаем цикл и возвращем true
			}
		}
		grid[row][col] = '.' // очищаем столбец для след рекурсии
	}
	return false
}
